import math

def reward_function(params):
    # Read input variables
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    all_wheels_on_track = params['all_wheels_on_track']
    speed = params['speed']
    steering = abs(params['steering_angle'])

    # Initialize the reward with a typical value
    reward = 1.0

    # Penalize if the car is off track
    if not all_wheels_on_track:
        return 1e-3  # Minimum reward if off-track

    # Calculate the direction of the center line based on closest waypoints
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]

    # Calculate the track direction in radians using atan2(dy, dx)
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])

    # Convert radians to degrees
    track_direction = math.degrees(track_direction)

    # Calculate the difference between the track direction and the car's heading
    direction_diff = abs(track_direction - heading)
    if direction_diff > 180:
        direction_diff = 360 - direction_diff

    # Penalize the reward if the direction difference is too large
    DIRECTION_THRESHOLD = 10.0
    if direction_diff > DIRECTION_THRESHOLD:
        reward *= 0.5

    # Calculate the curvature dynamically
    curvature = calculate_curvature(waypoints, closest_waypoints)

    # Adjust speed dynamically based on curvature
    SPEED_THRESHOLD = 5.0  # Base speed threshold
    if curvature > 0.1:
        speed_threshold = SPEED_THRESHOLD * 0.5  # Reduce speed more on sharp turns
    else:
        speed_threshold = SPEED_THRESHOLD

    # Reward for speed
    speed_reward = min(speed / speed_threshold, 1.0)
    reward *= speed_reward

    # Penalize for excessive steering
    STEERING_THRESHOLD = 15.0  # Adjust this threshold as needed
    if steering > STEERING_THRESHOLD:
        reward *= 0.8

    return float(reward)


def calculate_curvature(waypoints, closest_waypoints):
    # Get previous, current, and next waypoints
    prev_point = waypoints[closest_waypoints[0]]
    current_point = waypoints[closest_waypoints[1]]
    if closest_waypoints[1] < len(waypoints) - 1:
        next_point = waypoints[closest_waypoints[1] + 1]
    else:
        next_point = waypoints[0]  # Wrap around if at the last waypoint

    # Calculate vectors between waypoints
    vec1 = (current_point[0] - prev_point[0], current_point[1] - prev_point[1])
    vec2 = (next_point[0] - current_point[0], next_point[1] - current_point[1])

    # Calculate the angle between the vectors
    dot_product = vec1[0] * vec2[0] + vec1[1] * vec2[1]
    magnitude1 = math.sqrt(vec1[0]**2 + vec1[1]**2)
    magnitude2 = math.sqrt(vec2[0]**2 + vec2[1]**2)

    if magnitude1 == 0 or magnitude2 == 0:
        return 0.0

    angle = math.acos(dot_product / (magnitude1 * magnitude2))

    # Curvature is inversely proportional to the angle
    curvature = 1.0 / (1.0 + angle)
    return curvature
