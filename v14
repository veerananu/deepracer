import math

def reward_function(params):
    # Read input variables
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    all_wheels_on_track = params['all_wheels_on_track']
    speed = params['speed']
    is_reversed = params['is_reversed']
    progress = params['progress']
    track_width = params['track_width']
    distance_from_center = params['distance_from_center']

    # Initialize the reward with a typical value
    reward = 1.0

    # Penalize if the car is off track
    if not all_wheels_on_track:
        reward *= 0.5  # Softer penalty to allow for recovery

    # Penalize if driving backward (reversed)
    if is_reversed:
        return 1e-3  # Strong penalty for reversing

    # Calculate the direction of the center line based on closest waypoints
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]

    # Calculate the direction in radians using atan2(dy, dx)
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    track_direction = math.degrees(track_direction)

    # Calculate the difference between the track direction and the car's heading
    direction_diff = abs(track_direction - heading)
    if direction_diff > 180:
        direction_diff = 360 - direction_diff

    # Penalize if the direction difference is too large, but scale it
    DIRECTION_THRESHOLD = 10.0
    reward *= max(0.5, 1 - (direction_diff / 90))  # Scaled penalty based on deviation

    # Calculate curvature based on multiple waypoints
    curvature = calculate_curvature(waypoints, closest_waypoints, num_points=5)
    MAX_SPEED = 4.0  # Maximum speed for straight sections
    MAX_CURVE_SPEED = 2.0  # Lower speed limit for sharp turns

    # Adjust speed rewards based on curvature
    if curvature > 0.2:  # Sharper turn
        if speed > MAX_CURVE_SPEED:
            reward *= 0.3  # Penalize for speeding in sharp curves
        else:
            reward *= 1.3  # Reward for safe speed in curves
    else:  # Straight section
        if speed >= MAX_SPEED:
            reward *= 1.5  # Reward for max speed on straights
        elif speed >= (MAX_SPEED * 0.8):  # Reward for at least 80% max speed
            reward *= 1.2
        else:
            reward *= 0.8  # Slight penalty for being too slow on straights

    # Reward for being close to the center of the track
    reward *= max(0.5, 1 - (distance_from_center / (track_width * 0.5)))  # Penalize if far from center

    # Add progress reward
    reward += progress * 0.2  # Reward for making progress

    return float(reward)


def calculate_curvature(waypoints, closest_waypoints, num_points=5):
    # Ensure we have enough waypoints to calculate curvature
    total_waypoints = len(waypoints)
    start_index = max(closest_waypoints[0] - num_points//2, 0)
    end_index = min(closest_waypoints[1] + num_points//2, total_waypoints - 1)

    # Get waypoints for curvature calculation
    relevant_points = waypoints[start_index:end_index + 1]

    if len(relevant_points) < 3:
        return 0.0

    # Calculate the angles between the waypoints
    curvature = 0.0
    for i in range(len(relevant_points) - 2):
        p1 = relevant_points[i]
        p2 = relevant_points[i + 1]
        p3 = relevant_points[i + 2]

        v1 = (p2[0] - p1[0], p2[1] - p1[1])
        v2 = (p3[0] - p2[0], p3[1] - p2[1])

        # Calculate dot product and magnitudes
        dot_product = v1[0] * v2[0] + v1[1] * v2[1]
        mag_v1 = math.sqrt(v1[0] ** 2 + v1[1] ** 2)
        mag_v2 = math.sqrt(v2[0] ** 2 + v2[1] ** 2)

        # Calculate the angle between vectors (in radians)
        if mag_v1 > 0 and mag_v2 > 0:
            angle = math.acos(dot_product / (mag_v1 * mag_v2))
            curvature += 1.0 / angle if angle != 0 else 0.0

    # Average curvature over all sampled points
    return curvature / (len(relevant_points) - 2)
