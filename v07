import math

def reward_function(params):
    # Read input variables
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    all_wheels_on_track = params['all_wheels_on_track']
    speed = params['speed']
    steering_angle = abs(params['steering_angle'])  # Steering angle (absolute value)
    track_length = params['track_length']
    track_width = params['track_width']
    progress = params['progress']

    # Initialize reward
    reward = 1.0

    # Penalize if off-track
    if not all_wheels_on_track:
        return 1e-3  # Minimum reward

    # Calculate the direction of the center line based on closest waypoints
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    track_direction = math.degrees(track_direction)

    # Calculate direction difference
    direction_diff = abs(track_direction - heading)
    if direction_diff > 180:
        direction_diff = 360 - direction_diff

    # Handle curve detection and control
    curvature = calculate_curvature(waypoints, closest_waypoints)
    future_curvature = calculate_future_curvature(waypoints, closest_waypoints)

    # Speed adjustment based on curve severity
    MAX_SPEED = 4.0  # Base max speed
    if future_curvature > 0.1:  # If there's a curve ahead
        max_speed = max(1.0, MAX_SPEED - future_curvature * 2)  # Reduce speed in curves
        if speed > max_speed:
            reward *= 0.6  # Penalize for going too fast in a curve
    else:
        reward *= 1.2  # Reward for maintaining higher speeds on straights

    # Steering penalty in curves
    if future_curvature > 0.1:  # In curves
        STEERING_THRESHOLD = 15.0  # More sensitive steering required
        if steering_angle > STEERING_THRESHOLD:
            reward *= 0.6  # Penalize for excessive steering in curves
    else:
        reward *= 1.1  # Encourage faster progress on straights

    # Progress-based reward (encourage completing laps faster)
    if curvature > 0.1 and all_wheels_on_track:
        reward += progress * 0.1  # Reward progress in curves

    # Detect reversed driving
    if direction_diff > 90:  # If the car is heading backward
        reward *= 0.1  # Significant penalty for going in reverse

    return float(reward)


def calculate_curvature(waypoints, closest_waypoints):
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]

    # Calculate curvature using the difference in direction
    track_direction = math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0])
    track_direction = math.degrees(track_direction)
    
    # Calculate the next section curvature using future waypoints
    if closest_waypoints[1] + 1 < len(waypoints):
        further_point = waypoints[closest_waypoints[1] + 1]
        future_direction = math.atan2(further_point[1] - next_point[1], further_point[0] - next_point[0])
        future_direction = math.degrees(future_direction)
        curvature = abs(future_direction - track_direction)
    else:
        curvature = 0  # No curvature at the end of the track

    return curvature


def calculate_future_curvature(waypoints, closest_waypoints, lookahead=5):
    # Predict future curvature based on upcoming waypoints
    curvature_sum = 0.0
    for i in range(1, lookahead):
        if closest_waypoints[1] + i < len(waypoints):
            curvature_sum += calculate_curvature(
                waypoints, [closest_waypoints[0] + i - 1, closest_waypoints[0] + i]
            )
    return curvature_sum / lookahead  # Average curvature over the lookahead period
