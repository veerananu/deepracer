import math

def reward_function(params):
    # Read input variables
    waypoints = params['waypoints']
    closest_waypoints = params['closest_waypoints']
    heading = params['heading']
    all_wheels_on_track = params['all_wheels_on_track']
    speed = params['speed']
    steering_angle = abs(params['steering_angle'])  # Steering angle (absolute value)
    progress = params['progress']
    track_length = params['track_length']
    
    # Initialize reward
    reward = 1.0

    # Penalize if off-track
    if not all_wheels_on_track:
        return 1e-3  # Minimum reward

    # Calculate the direction of the center line based on closest waypoints
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]
    track_direction = math.degrees(math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0]))

    # Calculate direction difference
    direction_diff = abs(track_direction - heading)
    if direction_diff > 180:
        direction_diff = 360 - direction_diff

    # Reverse driving penalty
    if direction_diff > 90:  # Significant difference in heading
        reward *= 0.1  # Heavily penalize for driving in reverse

    # Curvature-based speed adjustment
    curvature = calculate_curvature(waypoints, closest_waypoints)
    max_speed = adjust_speed_based_on_curvature(curvature)
    
    # Penalize if the car is going too fast on curves
    if speed > max_speed:
        reward *= 0.7  # Reduce reward for speeding on curves

    # Steering penalty in curves
    if curvature > 0.1 and steering_angle > 15.0:  # Adjust for sharper curves
        reward *= 0.7  # Penalize for excessive steering

    # Progress reward (encourages completing laps faster)
    reward += progress * 0.1  # Reward based on how much of the track is completed

    return float(reward)


def calculate_curvature(waypoints, closest_waypoints):
    next_point = waypoints[closest_waypoints[1]]
    prev_point = waypoints[closest_waypoints[0]]

    # Calculate curvature using direction difference
    track_direction = math.degrees(math.atan2(next_point[1] - prev_point[1], next_point[0] - prev_point[0]))
    
    if closest_waypoints[1] + 1 < len(waypoints):
        further_point = waypoints[closest_waypoints[1] + 1]
        future_direction = math.degrees(math.atan2(further_point[1] - next_point[1], further_point[0] - next_point[0]))
        curvature = abs(future_direction - track_direction)
    else:
        curvature = 0.0  # No curvature near the end of the track
    
    return curvature


def adjust_speed_based_on_curvature(curvature):
    # Adjust speed threshold based on curvature
    BASE_SPEED = 4.0
    if curvature > 0.1:
        return max(1.0, BASE_SPEED - curvature * 2.0)  # Lower speed in curves
    return BASE_SPEED
